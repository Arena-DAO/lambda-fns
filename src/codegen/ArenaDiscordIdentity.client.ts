/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import type { StdFee } from "@cosmjs/amino";
import type {
	CosmWasmClient,
	ExecuteResult,
	SigningCosmWasmClient,
} from "@cosmjs/cosmwasm-stargate";
import {
	type Action,
	Addr,
	type ArrayOfAddr,
	type ArrayOfDiscordConnection,
	type Coin,
	type DiscordConnection,
	type DiscordProfile,
	ExecuteMsg,
	Expiration,
	InstantiateMsg,
	MigrateMsg,
	type NullableDiscordProfile,
	type OwnershipForString,
	QueryMsg,
	Timestamp,
	type Uint64,
	Uint128,
} from "./ArenaDiscordIdentity.types";
export interface ArenaDiscordIdentityReadOnlyInterface {
	contractAddress: string;
	discordProfile: ({
		addr,
	}: {
		addr: string;
	}) => Promise<NullableDiscordProfile>;
	connectedWallets: ({
		discordId,
	}: {
		discordId: Uint64;
	}) => Promise<ArrayOfAddr>;
	discordConnections: ({
		addr,
	}: {
		addr: string;
	}) => Promise<ArrayOfDiscordConnection>;
	ownership: () => Promise<OwnershipForString>;
}
export class ArenaDiscordIdentityQueryClient
	implements ArenaDiscordIdentityReadOnlyInterface
{
	client: CosmWasmClient;
	contractAddress: string;
	constructor(client: CosmWasmClient, contractAddress: string) {
		this.client = client;
		this.contractAddress = contractAddress;
		this.discordProfile = this.discordProfile.bind(this);
		this.connectedWallets = this.connectedWallets.bind(this);
		this.discordConnections = this.discordConnections.bind(this);
		this.ownership = this.ownership.bind(this);
	}
	discordProfile = async ({
		addr,
	}: {
		addr: string;
	}): Promise<NullableDiscordProfile> => {
		return this.client.queryContractSmart(this.contractAddress, {
			discord_profile: {
				addr,
			},
		});
	};
	connectedWallets = async ({
		discordId,
	}: {
		discordId: Uint64;
	}): Promise<ArrayOfAddr> => {
		return this.client.queryContractSmart(this.contractAddress, {
			connected_wallets: {
				discord_id: discordId,
			},
		});
	};
	discordConnections = async ({
		addr,
	}: {
		addr: string;
	}): Promise<ArrayOfDiscordConnection> => {
		return this.client.queryContractSmart(this.contractAddress, {
			discord_connections: {
				addr,
			},
		});
	};
	ownership = async (): Promise<OwnershipForString> => {
		return this.client.queryContractSmart(this.contractAddress, {
			ownership: {},
		});
	};
}
export interface ArenaDiscordIdentityInterface
	extends ArenaDiscordIdentityReadOnlyInterface {
	contractAddress: string;
	sender: string;
	setProfile: (
		{
			addr,
			discordProfile,
		}: {
			addr: string;
			discordProfile: DiscordProfile;
		},
		fee?: number | StdFee | "auto",
		memo?: string,
		_funds?: Coin[],
	) => Promise<ExecuteResult>;
	setConnections: (
		{
			connections,
		}: {
			connections: DiscordConnection[];
		},
		fee?: number | StdFee | "auto",
		memo?: string,
		_funds?: Coin[],
	) => Promise<ExecuteResult>;
	setFaucetAmount: (
		{
			amount,
		}: {
			amount: Coin;
		},
		fee?: number | StdFee | "auto",
		memo?: string,
		_funds?: Coin[],
	) => Promise<ExecuteResult>;
	withdraw: (
		fee?: number | StdFee | "auto",
		memo?: string,
		_funds?: Coin[],
	) => Promise<ExecuteResult>;
	updateOwnership: (
		action: Action,
		fee?: number | StdFee | "auto",
		memo?: string,
		_funds?: Coin[],
	) => Promise<ExecuteResult>;
}
export class ArenaDiscordIdentityClient
	extends ArenaDiscordIdentityQueryClient
	implements ArenaDiscordIdentityInterface
{
	client: SigningCosmWasmClient;
	sender: string;
	contractAddress: string;
	constructor(
		client: SigningCosmWasmClient,
		sender: string,
		contractAddress: string,
	) {
		super(client, contractAddress);
		this.client = client;
		this.sender = sender;
		this.contractAddress = contractAddress;
		this.setProfile = this.setProfile.bind(this);
		this.setConnections = this.setConnections.bind(this);
		this.setFaucetAmount = this.setFaucetAmount.bind(this);
		this.withdraw = this.withdraw.bind(this);
		this.updateOwnership = this.updateOwnership.bind(this);
	}
	setProfile = async (
		{
			addr,
			discordProfile,
		}: {
			addr: string;
			discordProfile: DiscordProfile;
		},
		fee: number | StdFee | "auto" = "auto",
		memo?: string,
		_funds?: Coin[],
	): Promise<ExecuteResult> => {
		return await this.client.execute(
			this.sender,
			this.contractAddress,
			{
				set_profile: {
					addr,
					discord_profile: discordProfile,
				},
			},
			fee,
			memo,
			_funds,
		);
	};
	setConnections = async (
		{
			connections,
		}: {
			connections: DiscordConnection[];
		},
		fee: number | StdFee | "auto" = "auto",
		memo?: string,
		_funds?: Coin[],
	): Promise<ExecuteResult> => {
		return await this.client.execute(
			this.sender,
			this.contractAddress,
			{
				set_connections: {
					connections,
				},
			},
			fee,
			memo,
			_funds,
		);
	};
	setFaucetAmount = async (
		{
			amount,
		}: {
			amount: Coin;
		},
		fee: number | StdFee | "auto" = "auto",
		memo?: string,
		_funds?: Coin[],
	): Promise<ExecuteResult> => {
		return await this.client.execute(
			this.sender,
			this.contractAddress,
			{
				set_faucet_amount: {
					amount,
				},
			},
			fee,
			memo,
			_funds,
		);
	};
	withdraw = async (
		fee: number | StdFee | "auto" = "auto",
		memo?: string,
		_funds?: Coin[],
	): Promise<ExecuteResult> => {
		return await this.client.execute(
			this.sender,
			this.contractAddress,
			{
				withdraw: {},
			},
			fee,
			memo,
			_funds,
		);
	};
	updateOwnership = async (
		action: Action,
		fee: number | StdFee | "auto" = "auto",
		memo?: string,
		_funds?: Coin[],
	): Promise<ExecuteResult> => {
		return await this.client.execute(
			this.sender,
			this.contractAddress,
			{
				update_ownership: action,
			},
			fee,
			memo,
			_funds,
		);
	};
}
